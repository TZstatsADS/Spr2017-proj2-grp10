snoq$year      <- 1948:1983
snoq[1:3, 360:367]
require(reshape2)
snoq.melt <- melt(snoq, id.vars = "year", variable.name = "day", value.name = "precip")
head(snoq.melt)
tail(snoq.melt)
dim(snoq.melt) # 36*366
dim(snoq)
colnames(snpq)
colnames(snoq)
snoq[1:3, 360:367]
snoq.melt.chron <- snoq.melt[order(snoq.melt$year, snoq.melt$day), ]
leap.days <- snoq.melt.chron$day == 366
sum(is.na(snoq.melt.chron$precip[leap.days]))
snoq.melt.chron <- na.omit(snoq.melt.chron)
short.chron <- snoq.melt.chron[-nrow(snoq.melt.chron), ]
dim(short.chron)
precip.next <- snoq.melt.chron$precip[-1]
snoq.melt.chron$precip[-1]
snoq.pairs  <- data.frame(short.chron, precip.next)
head(snoq.pairs)
snoq.recast <- dcast(snoq.melt, year ~ ...)
snoq.recast <- dcast(snoq.melt, year ~ ...)
dim(snoq.recast)
snoq.recast[1:4, 1:15]
head(snoq.melt)
mapply(rep, 1:3,3:1)
strikes <- read.csv("strikes.csv", as.is = TRUE)
strikes <- read.csv("strikes.csv", as.is = TRUE)
italy.strikes <- strikes[strikes$country == "Italy", ]
dim(italy.strikes)
strikes.split <- split(strikes, strikes$country)
names(strikes.split)
strikes.split
my.array           <- array(1:27, c(3,3,3))
my.array[, , 3]
my.array
my.array[, , 3]
library(plyr) #a for array, m for matrix, l for list, d for dataframe
my.list <- list(nums = rnorm(1000), lets = letters, pops = state.x77[ ,"Population"])
head(my.list[[1]], 5)
head(my.list[[1]], 5)
head(my.list[[2]], 5)
head(my.list[[1]], 5)
head(my.list[[2]], 5)
head(my.list[[3]], 5)
my.list <- list(nums = rnorm(1000), lets = letters, pops = state.x77[ ,"Population"])
laply(my.list, summary)
llply(my.list, range) # Get back a list
laply(my.list, summary)
ldply(my.list, summary)
llply(my.list, summary) # Works just fine
laply(my.list, summary) # wouldn't work
par(mfrow = c(3, 3), mar = c(4, 4, 1, 1))
a_ply(my.array, 2:3, plot, ylim = range(my.array), pch = 19, col = 6)
strike.coef.a <- daply(strikes, .(country), my.strike.lm)
strike.coef.75 <- ddply(strikes, .(country, I(year<=1975)), my.strike.lm)
library("ISLR")
library("ISLR")
head(USArrests)
USArrests <- apply(USArrests, 2, scale)
head(USArrests)
pca <- prcomp(USArrests)
pca
biplot(pca)
dev.off()
biplot(pca)
summary(pca)
km.out$cluster[1:25]
x <- matrix(rnorm(50*2), ncol = 2)
x[1:25, 1] <- x[1:25, 1] + 3
x[1:25, 2] <- x[1:25, 2] - 4
head(x, 5)
km.out <- kmeans(x, centers = 2, nstart = 20)
km.out$cluster[1:25]
km.out$cluster[26:50]
set.seed(4)
km.out <- kmeans(x, centers = 3, nstart = 20)
km.out$cluster
head(iris)
library(ggplot2)
ggplot(data = iris) +
geom_point(aes(Petal.Length, Petal.Width, color = Species))
km.out <- kmeans(iris[, 3:4], centers = 2, nstart = 20)
km.out$centers
km.out$cluster
table(km.out$cluster, iris$Species)
iris$cluster <- as.factor(km.out$cluster)
ggplot(data = iris) +
geom_point(mapping = aes(Petal.Length, Petal.Width, color = iris$cluster))
km.out <- kmeans(iris[, 3:4], centers = 3, nstart = 20)
table(km.out$cluster, iris$Species)
iris$cluster <- as.factor(km.out$cluster)
ggplot(data = iris) +
geom_point(mapping = aes(Petal.Length, Petal.Width, color = iris$cluster))
centers  <- apply(data, 2, tapply, clusters, mean)
clusters <- sample(1:3, nrow(data), replace = TRUE)
centers  <- apply(data, 2, tapply, clusters, mean)
data <- iris[, 3:4]
clusters <- sample(1:3, nrow(data), replace = TRUE)
centers  <- apply(data, 2, tapply, clusters, mean)
centers
dist <- function(p1, p2) {
return(sum((p1 - p2)^2))
}
point.assign <- function(point, centers) {
# Input: one point
# Output: which cluster center is closest
return(which.min(c(dist(point, centers[1, ]),
dist(point, centers[2, ]),
dist(point, centers[3, ]))))
}
new.clusters <- function(points, centers) {
return(apply(points, 1, point.assign, centers))
}
new.clus <- new.clusters(points = data, centers = centers)
head(data)
apply
while(any(new.clus != clusters)) {
clusters <- new.clus
centers  <- apply(data, 2, tapply, clusters, mean)
# calculate centers for each row and each cluster
# clusters and mean are the additional parameters to be passed to tapply
# tapply(data, clusters, mean)
new.clus <- new.clusters(points = data, centers = centers)
}
table(new.clus, iris$Species)
?colmeans
??colmeans
a<-as.logical(T,F,F,T)
a
a<-as.logical(c)T,F,F,T)
a<-as.logical(c(T,F,F,T))
a
b<-as.logical(c(T,T,T))
a & b
b<-as.logical(c(T,T,T,F))
a& b
?sample
qqplot(y, rt(300, df = 5))
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
my.array           <- array(1:27, c(3,3,3))
rownames(my.array) <- c("R1", "R2", "R3")
colnames(my.array) <- c("C1", "C2", "C3")
dimnames(my.array)[[3]] <- c("Bart", "Lisa", "Maggie")
my.array
my.array           <- array(1:81, c(3,3,3,3))
my.array
qqplot(y, rt(300, df = 5))
my.array[,2,2,]
my.list <- list(nums = rnorm(1000), lets = letters, pops = state.x77[ ,"Population"])
head(my.list[[1]], 5)
head(my.list[[2]], 5)
head(my.list[[3]], 5)
llply(my.list, range) # Get back a list
laply(my.list, summary) # wouldn't work
ldply(my.list, summary)
llply(my.list, summary) # Works just fine
library(plyr)
llply(my.list, range) # Get back a list
laply(my.list, summary) # wouldn't work
ldply(my.list, summary)
llply(my.list, summary) # Works just fine
laply(my.list,range)
ldply(my.list,range)
a_ply(my.array, 2:3, plot, ylim = range(my.array), pch = 19, col = 6)
a_ply(my.array, 1:3, plot, ylim = range(my.array), pch = 19, col = 6)
a_ply
?a_ply
# number of desired clusters,
km.out <- kmeans(x, centers = 2, nstart = 20)
kmeans
x <- matrix(rnorm(50*2), ncol = 2)
x[1:25, 1] <- x[1:25, 1] + 3
x[1:25, 2] <- x[1:25, 2] - 4
head(x, 5)
# number of desired clusters,
km.out <- kmeans(x, centers = 2, nstart = 20)
km.out
km.out$clusters
km.out$cluster
data <- iris[, 3:4]
# For each of the K clusters, compute the cluster centriod. The kth
# centroid is the vector of the p feature means (covariate means) for the
# observations in the kth cluster.
# code the algo ourselfes
# randomly assign clusters
clusters <- sample(1:3, nrow(data), replace = TRUE)
# cluster means
centers  <- apply(data, 2, tapply, clusters, mean)
centers
tapply(iris[,3],clusters,mean)
a<-tapply(iris[,3],clusters,mean)
typeof(a)
a[1]
typeof(centeres)
typeof(centers)
center[1,1]
centers[1,1]
a
my.array
my.array[1,2,3,]
my.array[1,2,3]
my.array[1,2,3,1]
g <- airquality$Month
l <- split(airquality, g)
l
sum(l)
nrow(l)
l <- lapply(l, transform, Oz.Z = scale(Ozone))
l <- lapply(l, length)
l
g
l
g <- airquality$Month
airquality
dim(airquality)
colnames(airquality)
split(airquality,a,Wind)
split(airquality,g,Wind)
split(airquality,g & Wind)
split(airquality,c(g,airquality$Ozone))
split(airquality,list(g,airquality$Ozone))
aM-split(airquality,list(g,airquality$Ozone))
a<-split(airquality,list(g,airquality$Ozone))
lapply(a,length)
a<-split(airquality,list(g,airquality$Ozone))
a
head(airquality)
a<-split(airquality,list(g,airquality$Day))
a
a<-split(airquality,list(g,I(airquality$Day>15)))
a
lapply(a,length)
a
lapply(a,nrow)
library(ply)
library(plyr)
dlply(airquality,.(Month,I(Day>10)),nrow)
airquality["Day"=5]
airquality["Day"=5,]
airquality[Day=5,]
airquality[airquality$Day=5,]
airquality[airquality$Day==5,]
airquality[Day==5,]
which(airquality$Day==15)
density(1:10)
plot(density(1:10))
plot(density(2:100))
data<-matrix(seq(1:100),nrow=10)
dgamma(data)
dgamma(data,shape=1,scale=2)
d<-dgamma(data,shape=1,scale=2)
dim(d)
sm(d)
sum(d)
d<-dgamma(data,shape=1,scale=2,log=T)
sum(d)
factory.n <- list(c("labor","steel"), c("car","truck"))
factory   <- matrix(c(40, 1, 60, 3), nrow = 2, dimnames = factory.n)
available        <- c(1600, 70)
names(available) <- rownames(factory)
prices           <- c(car = 13, truck = 27)
factory
factory %*% c(5,5)
c(5,5) %*%  factory
sapply(1:2,rep,1:2)
sapply(1:2,rep)
data
mapply(data,mean)
mapply(mean,data)
a<-rep(c(a,b),c(4,4))
a<-rep(c("a","b"),c(4,4))
a
aggregate(1:8,a,mean)
aggregate(1:8,list(a),mean)
?tapply
tapply(1:8,a,range)
tapply(1:8,a,range)[2]
tapply(1:8,a,range)[1]
tapply(1:8,a,range)[1,1]
tapply(1:8,a,range)[1]
typeof(tapply(1:8,a,range)[1]
)
aggregate(tapply(1:8,list(a),range)
)
aggregate(1:8,list(a),range)
km.out <- kmeans(1:100, centers = 2, nstart = 20)
km.out
summary(km.out)
km.out$tot.withinss
km.out <- kmeans(iris[, 3:4], centers = 3, nstart = 20)
table(km.out$cluster, iris$Species)
install.packages("tidyverse")
library(tidyverse)
install.packages("readr")
install.packages("DT")
library(DT)
datatable(iris, options = list(pageLength = 5))
datatable(iris, options = list(pageLength = 5))
tibble(x=letters)
library(tibble)
tibble(x=letters)
tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
a<-tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
a
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prez.out=substr(speeches, 6, nchar(speeches)-4)
length.speeches=rep(NA, length(speeches))
ff.all<-Corpus(DirSource(folder.path))
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english")) # remove words that is only important to the grammar structure
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
isntall.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp('Chen/guarantee')
library(rsconnect)
library(shiny);
runApp('Chen/guarantee')
install.packages("rsconnect")
runApp('Chen/guarantee')
library(glmnet)
library(rsconnect)
library(shiny)
library(leaps)
library(glmnet)
install.packages("glmnet")
runApp('Chen/guarantee')
runApp('Chen/guarantee')
runApp('Chen/guarantee')
runApp('Chen/guarantee')
runApp('Chen/guarantee')
getwd()
runApp('guarantee')
runApp('guarantee')
runApp('guarantee')
runApp('guarantee')
plot(1:10,xlim=c(1:4))
plot(1:10,xlim=c(1,4))
plot(1:10,xlim=c(1,4))
plot(1:10,xlim=c(1,10))
plot(1:10,xlim=10)
plot(1:10,xlim=1:10)
plot(1:10,xlim=c(1,10))
plot(rnorm(10),xlim=c(1,10))
dev.off()
plot(rnorm(10))
rnorm(10)
hist(rnorm(10))
plot(1:10)
runApp('guarantee')
runApp('guarantee')
runApp('guarantee')
runApp('guarantee')
runApp('guarantee')
rmarkdown::shiny_prerendered_clean('drive-download-20170210T171239Z/LinearRegression.Rpres')
a
a<-c(1,2,3)
a
library(dplyr)
library(data.table)
data<-fread("data/finaldata.csv",select=4,col.names="Name")
packages.used=c("dplyr", "data.table")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(dplyr)
library(data.table)
setwd("/Users/yuejin/Dropbox/Courseworks/ADS/project2/Spr2017-proj2-proj2_team10")
data<-fread("data/finaldata.csv",select=4,col.names="Name")
colnames(data)
data<-fread("data/finaldata.csv")
colnames(data)
data %*%
select(Rank,AvgCost,CrimeRate,HappyRank)
data %*%
select("Rank",AvgCost,CrimeRate,HappyRank)
data %*%
select("Rank")
data %*%
select(Rank)
names(data)
data %*%
select(State)
select(data,State)
data %>%
select(Rank,AvgCost,CrimeRate,HappyRank)
data<-data %>%
select(Rank,AvgCost,CrimeRate,HappyRank)
data<-fread("data/finaldata.csv")
colnames(data)
data<-data %>%
mutate(ID,seq(1:nrow(data)))
data<-data %>%
mutate(ID=seq(1:nrow(data)))%>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)
data<-data %>%
mutate(ID=seq(1:nrow(data)))%>%
select(ID,Name,Rank,AvgCost,CrimeRate,HappyRank)
head(ID)
head(data)
data<-data %>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)
w1<-0.4
w2<-0.6
data<-data %>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)%>%
arrange(AvgCost,Rank)%>%
mutate(AvgCost=seq(1:nrow(data)))
head(data)
data<-fread("data/finaldata.csv")
data(data$Rank==81)
data[data$Rank==81,]
head(data)
data<-data %>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)%>%
arrange(AvgCost,Rank)%>%
mutate(AvgCost=seq(1:nrow(data)))
data<-data %>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)%>%
arrange(AvgCost,Rank)%>%
mutate(AvgCost=seq(1:nrow(data)))%>%
arrange(CrimeRate,Rank)%>%
mutate(CrimeRate=seq(1:nrow(data)))%>%
arrange(HappyRank,Rank)%>%
mutate(HappyRank=seq(1:nrow(data)))%>%
head
head(data)
w1
w3
w3<-0.6
w4<-0.9
data<-data %>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)%>%
arrange(AvgCost,Rank)%>%
mutate(AvgCost=seq(1:nrow(data)))%>%
arrange(CrimeRate,Rank)%>%
mutate(CrimeRate=seq(1:nrow(data)))%>%
arrange(HappyRank,Rank)%>%
mutate(HappyRank=seq(1:nrow(data)))%>%
data_after<-data%>%
mutate(new_rank=w1*Rank+w2*AvgCost+w3*CrimeRate+w4*HappyRank)
data<-data %>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)%>%
arrange(AvgCost,Rank)%>%
mutate(AvgCost=seq(1:nrow(data)))%>%
arrange(CrimeRate,Rank)%>%
mutate(CrimeRate=seq(1:nrow(data)))%>%
arrange(HappyRank,Rank)%>%
mutate(HappyRank=seq(1:nrow(data)))%>%
data_after<-data%>%
mutate(new_rank=w1*Rank+w2*AvgCost+w3*CrimeRate+w4*HappyRank) %>%
arrange(new_rank)
data<-data %>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)%>%
arrange(AvgCost,Rank)%>%
mutate(AvgCost=seq(1:nrow(data)))%>%
arrange(CrimeRate,Rank)%>%
mutate(CrimeRate=seq(1:nrow(data)))%>%
arrange(HappyRank,Rank)%>%
mutate(HappyRank=seq(1:nrow(data)))%>%
data_after<-data %>%
mutate(new_rank=w1*Rank+w2*AvgCost+w3*CrimeRate+w4*HappyRank) %>%
arrange(new_rank)
data<-data %>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)%>%
arrange(AvgCost,Rank)%>%
mutate(AvgCost=seq(1:nrow(data)))%>%
arrange(CrimeRate,Rank)%>%
mutate(CrimeRate=seq(1:nrow(data)))%>%
arrange(HappyRank,Rank)%>%
mutate(HappyRank=seq(1:nrow(data)))%>%
data_after <- data %>%
mutate(new_rank=w1*Rank+w2*AvgCost+w3*CrimeRate+w4*HappyRank) %>%
arrange(new_rank)
data<-data %>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)%>%
arrange(AvgCost,Rank)%>%
mutate(AvgCost=seq(1:nrow(data)))%>%
arrange(CrimeRate,Rank)%>%
mutate(CrimeRate=seq(1:nrow(data)))%>%
arrange(HappyRank,Rank)%>%
mutate(HappyRank=seq(1:nrow(data)))%>%
data %>%
mutate(new_rank=w1*Rank+w2*AvgCost+w3*CrimeRate+w4*HappyRank) %>%
arrange(new_rank)
data<-data %>%
select(Name,Rank,AvgCost,CrimeRate,HappyRank)%>%
arrange(AvgCost,Rank)%>%
mutate(AvgCost=seq(1:nrow(data)))%>%
arrange(CrimeRate,Rank)%>%
mutate(CrimeRate=seq(1:nrow(data)))%>%
arrange(HappyRank,Rank)%>%
mutate(HappyRank=seq(1:nrow(data)))%>%
mutate(new_rank=w1*Rank+w2*AvgCost+w3*CrimeRate+w4*HappyRank) %>%
arrange(new_rank)
head(data)
