geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
dev.off()
ggsave(plot=last_plot(), device="jpeg", filename=paste("Category", name,".jpeg", sep=""), path="../figs", dpi=50)
}}
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
dev.off()
ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""), path="../figs", dpi=50)
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))+
xlab("Chronological index of President")
#ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
#ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
ylab("% frequency of word in inaugural address"))
#ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
#ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
dtmss.in.all<- removeSparseTerms(dtm.in.all, 0.35)
d <- dist(t(dtmss.in.all), method="euclidian")
fit <- hclust(d=d, method="ward")
plot(fit, hang=-1)
groups<- cutree(fit, k=6)
rect.hclust(fit, k=6, border="red")
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit.")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit@")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit[[:punct:]]")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "POLIT")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit")
catfunc(categoryiv)
categoryiv<- c("Nonadlt", "AffPt", "WlbPt", "WlbTot", "Polit. ")
catfunc(categoryiv)
wordvecii<- c("legislature", "house", "senate", "court", "constitution")
plot.yearterm(wordvecii)
wordveciid<- c("duty", "citizen", "virtuous", "republic", "people", "democracy")
plot.yearterm(wordveciid)
wordveciiex<- c("United States", "America")
plot.yearterm(wordveciiex)
wordveciiex<- c("United States", "America")
plot.yearterm(wordveciiex)
wordveciiex<- c("America")
plot.yearterm(wordveciiex)
wordveciiex<- c("united states", "america")
plot.yearterm(wordveciiex)
wordveciiex<- c("united states")
plot.yearterm(wordveciiex)
wordveciiex<- c("unitedstates")
plot.yearterm(wordveciiex)
wordveciiex<- c("America")
plot.yearterm(wordveciiex)
wordveciiex<- c("America")
wordveciiex<- c("america")
plot.yearterm(wordveciiex)
?plot
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""), path="../figs/")
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".jpeg", sep=""))
}}
catfunc(categoryi)
catfunc(categoryii)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".png", sep=""), path="../output/")
}}
catfunc(categoryi)
catfunc<- function(cat) {
for(i in 1:length(cat)) {
name<-cat[i]
print(ggplot(data=as.data.frame(dfsfunc(cat)[[i]]),
aes(x=index, y=count / year_total)) +
geom_point() +
geom_smooth()+
ggtitle(paste("Word category:", name, sep="")) +
scale_y_continuous(labels = scales::percent_format()) +
xlab("Chronological index of Presidents")+
ylab("% frequency of word in inaugural address"))
ggsave(plot=last_plot(), filename=paste("Category", name,".png", sep=""), path="../output")
}}
catfunc(categoryi)
?pbinom
knitr::opts_chunk$set(echo = TRUE)
pbinom(q=15, size=25, prob=0.5)
1-pbinom(q=15, size=25, prob=0.5)
0.1147615x2
0.1147615 * 2
pnorm
?pnorm
1-pnorm(0, mean=0.5, sd=1)
install.packages("BSDA")
pretest<- c(30, 28,31,26,20,30,34,15,28,20,30,29,31,29,34,20,26,25,31,29)
```
pretest<- c(30, 28,31,26,20,30,34,15,28,20,30,29,31,29,34,20,26,25,31,29)
posttest<- c(20,30,32,30,16,25,31,18,33,25,32,22,34,32,32,27,28,29,32,32)
d<- pretest-posttest
scores<-data.frame(pretest, posttest,d)
View(scores)
t.test(pretest, posttest, var.equal=TRUE, paired=TRUE)
t.test(pretest, posttest, var.equal=TRUE)
t.test(pretest, posttest, var.equal=TRUE, paired=TRUE)
?t.test
t.test(pretest, posttest, var.equal=TRUE, paired=TRUE, conf.level=0.95)
?qqplot
qqnorm(pretest, main="Normal Q-Q Plot for pretest data", xlab="Theoretical Quantiles", ylab="Sample Quantiles")
qqnorm(pretest, main="Normal Q-Q Plot for pretest data", xlab="Theoretical Quantiles", ylab="Sample Quantiles", plot.it=TRUE)
qqnorm(pretest, main="Normal Q-Q Plot for pretest data", xlab="Theoretical Quantiles", ylab="Sample Quantiles")
qqline(pretest)
qqnorm(pretest, main="Normal Q-Q Plot for pretest data", xlab="Theoretical Quantiles", ylab="Sample Quantiles")
qqnorm(posttest, main="Normal Q-Q Plot for pretest data", xlab="Theoretical Quantiles", ylab="Sample Quantiles")
qqnorm(pretest, main="Normal Q-Q Plot for pretest data", xlab="Theoretical Quantiles", ylab="Sample Quantiles")
qqline(pretest)
pretest<- c(30, 28,31,26,20,30,34,15,28,20,30,29,31,29,34,20,26,25,31,29)
posttest<- c(20,30,32,30,16,25,31,18,33,25,32,22,34,32,32,27,28,29,32,32)
d<- pretest-posttest
scores<-data.frame(pretest, posttest,d)
t.test(pretest, posttest, var.equal=TRUE, paired=TRUE, conf.level=0.95)
qqnorm(pretest, main="Normal Q-Q Plot for pretest data", xlab="Theoretical Quantiles", ylab="Sample Quantiles")
qqline(pretest)
qqnorm(posttest, main="Normal Q-Q Plot for pretest data", xlab="Theoretical Quantiles", ylab="Sample Quantiles")
qqline(posttest)
library(BSDA)
?SIGN.test
SIGN.test(d, md=0, alternative="two.sided", conf.level=0.95)
?t.test
t.test(d, mu=0)
x<-c(9.00, 9.50, 9.75, 10.00, 13.00, 9.50)
y<- c(11.50, 12.00,9.00,11.50,13.25, 13.00)
t.test(x,y, paired=FALSE, var.equal=FALSE, conf.level=0.95)
t.test(x,y, paired=FALSE, var.equal=TRUE, conf.level=0.95)
t.test(x,y, paired=FALSE, var.equal=FALSE, conf.level=0.95)
t.test(x,y, paired=FALSE, var.equal=TRUE, conf.level=0.95)
?shapiro.test
?wilcox.test
wilcox.test(x,y)
wilcox.test(x,y)
1-pbinom(q=15, size=25, prob=0.6914625)
library(BSDA)
SIGN.test(d, md=0, alternative="two.sided", conf.level=0.95)
?cv.lm
??cv.lm
packages.used=c("readr", "data.table")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(dplyr)
library(data.table)
setwd("~/Desktop/Spr2017-proj2-proj2_team10/data")
howdy<-fread("data/MERGED2014_15_PP.csv",select=4,col.names="Name")
howdy<-fread("data/MERGED2014_15_PP.csv",select=4,col.names="Name")
library(readr)
MERGED2014_15_PP <- read_csv("~/Desktop/Spr2017-proj2-proj2_team10/data/MERGED2014_15_PP.csv")
View(MERGED2014_15_PP)
?mutate
?rowwise
library(readr)
DataCleaning <- read_csv("~/Desktop/Spr2017-proj2-proj2_team10/lib/DataCleaning.R")
View(DataCleaning)
edu<-MERGED2014_15_PP
educ_update<- educ[, 4:7]
educ_update<- edu[, 4:7]
View(educ_update)
colnames(educ_update) <- c("Name", "City", "State", "Zip")
educ_update$Latitude <- educ$LATITUDE
educ_update$Longitude <- educ$LONGITUDE
educ<-edu
educ_update$Latitude <- educ$LATITUDE
educ_update$Longitude <- educ$LONGITUDE
educ_update$ADMrate <- educ$ADM_RATE
colnames(educ_update) <- c("Name", "City", "State", "Zip")
educ_update$Latitude <- educ$LATITUDE
educ_update$Longitude <- educ$LONGITUDE
educ_update$ADMrate <- educ$ADM_RATE
educ_update$Ownership <- educ$CONTROL
View(educ)
colnames(educ)
which(colnames(educ)=="LOCALE2")
educ_update$Citytype<- educ$LOCALE
educ_update$SAT <- educ$SAT_AVG
educ_update$AvgCost <- as.numeric(educ$COSTT4_A) #average cost of attendence
educ_update$Major_agriculture <- educ$CIP01BACHL
educ_update$Major_NatureResource <- educ$CIP03BACHL
educ_update$Major_Architecture <- educ$CIP04BACHL
educ_update$Major_CS <- educ$CIP11BACHL
educ_update$Major_Edu <- educ$CIP13BACHL
educ_update$Major_Engineering <- educ$CIP14BACHL
educ_update$Major_Bio <- educ$CIP26BACHL
educ_update$Major_MathStat <- educ$CIP27BACHL
educ_update$Major_Psychology <- educ$CIP42BACHL
educ_update$Major_SocialScience <- educ$CIP45BACHL
educ_update$Major_Business <- educ$CIP52BACHL
educ_update$Major_History <- educ$CIP54BACHL
write.csv(educ_update, file = "CleanData.csv")
ranking_data <- read.csv("../output/name_ranking.csv")
View(ranking_data)
?filter
order(ranking_data$Name)
?order
View(ranking_data)
ranking_data <- ranking_data[order(ranking_data$Name), ] %>%
filter(!is.na(Rank))
View(ranking_data)
total <- merge(ranking_data, educ_update, by = "Name") %>% arrange(Rank)
ranking <- ranking[order(ranking$Name), ]
total <- merge(ranking_data, educ_update, by = "Name")
View(total)
?arrange
arrange(total$Rank)
merge(ranking_data, educ_update, by = "Name") %>% arrange(Rank)
View(total)
ranking_edu <- total[!is.na(total$Rank), ]
a_1 <- apply(a, "Name", gsub, patt="-", replace=", ")
View(total)
library(readr)
CleanData <- read_csv("~/Desktop/Spr2017-proj2-proj2_team10/data/CleanData.csv")
View(CleanData)
library(readr)
DataWithRank <- read_csv("~/Desktop/Spr2017-proj2-proj2_team10/data/DataWithRank.csv")
View(DataWithRank)
total<- arrange(total, Rank)
total<- arrange(total, desc(Rank))
order(total$Rank)
total1<- total[order(total$Rank),]
View(total1)
howdy<-fread("data/MERGED2014_15_PP.csv",select=4,col.names="Name")
howdy<-fread("MERGED2014_15_PP.csv",select=4,col.names="Name")
howdy$Ranking<-rep(NA,nrow(howdy))
howdy$ID<-seq(1:nrow(howdy))
ranking<-fread("data/ranking_forbes_2016.csv",skip=1)
ranking<-fread("ranking_forbes_2016.csv",skip=1)
result1<-
left_join(ranking,howdy,by="Name")
View(result1)
?left_join
result2<-result1%>%
filter(is.na(ID))%>%
rowwise()%>%
mutate(ID=agrep(Name,howdy$Name,ignore.case=T,max.distance = 0.1, useBytes = FALSE)[1])
educ <- read.csv("MERGED2014_15_PP.csv", stringsAsFactors = F, header =T, fileEncoding="latin1")
educ <- read.csv("MERGED2014_15_PP.csv")
View(educ)
educ_update<- educ[, 4:7]
colnames(educ_update) <- c("Name", "City", "State", "Zip")
educ_update$Latitude <- educ$LATITUDE
educ_update$Longitude <- educ$LONGITUDE
educ_update$ADMrate <- educ$ADM_RATE
educ_update$Ownership <- educ$CONTROL
educ_update$Setting <- educ$CCSIZSET # carneige classification -- size and setting
educ_update$Citytype<- educ$LOCALE
educ_update$SAT <- educ$SAT_AVG
educ_update$AvgCost <- as.numeric(educ$COSTT4_A) #average cost of attendence
educ_update$Major_agriculture <- educ$CIP01BACHL
educ_update$Major_NatureResource <- educ$CIP03BACHL
educ_update$Major_Architecture <- educ$CIP04BACHL
educ_update$Major_CS <- educ$CIP11BACHL
educ_update$Major_Edu <- educ$CIP13BACHL
educ_update$Major_Engineering <- educ$CIP14BACHL
educ_update$Major_Bio <- educ$CIP26BACHL
educ_update$Major_MathStat <- educ$CIP27BACHL
educ_update$Major_Psychology <- educ$CIP42BACHL
educ_update$Major_SocialScience <- educ$CIP45BACHL
educ_update$Major_Business <- educ$CIP52BACHL
educ_update$Major_History <- educ$CIP54BACHL
write.csv(educ_update, file = "CleanData.csv")
ranking_data <- read.csv("../output/name_ranking.csv")
ranking_data <- ranking_data[order(ranking_data$Name), ] %>%
filter(!is.na(Rank))
total<- merge(ranking_data, educ_update, by="Name")
total<- total[order(total$Rank),]
View(total)
seq(1:length(total))
seq(1:nrow(total))
rownames(total)<- seq(1:nrow(total))
View(total)
write.csv(total, file = "DataWithRank.csv")
library(readr)
DataWithRank <- read_csv("~/Desktop/Spr2017-proj2-proj2_team10/data/DataWithRank.csv")
View(DataWithRank)
write.csv(total, file = "DataWithRank.csv")
library(readr)
DataWithRank <- read_csv("~/Desktop/Spr2017-proj2-proj2_team10/data/DataWithRank.csv")
View(DataWithRank)
?fread
crime<-read.csv("CrimeData_final.csv")
View(crime)
crime<-read.csv("CrimeData_final.csv")
View(crime)
happy<-read.csv("Happinessdata.csv")
View(happy)
happy<-read.csv("Happinessdata.csv")
View(happy)
left_join
?left_join
?merge
crimehappy<-merge(crime, happy, by="State")
View(crimehappy)
View(DataWithRank)
FullData<-merge(DataWithRank, crimehappy,  by.x="State", by.y="Abb")
View(FullData)
colnames(crimehappy)[3]<-"State"
View(crimehappy)
crimehappy<-crimehappy[,-1]
FullData<-merge(DataWithRank, crimehappy,  by="State")
View(FullData)
crimehappy<-crimehappy[,-1]
crime<-read.csv("CrimeData_final.csv")
happy<-read.csv("Happinessdata.csv")
crimehappy<-merge(crime, happy, by="State")
colnames(crimehappy)[3]<-"State"
crimehappy<-crimehappy[,-1]
View(crimehappy)
View(DataWithRank)
View(DataWithRank)
View(crimehappy)
FullData<-merge(DataWithRank, crimehappy,  by="State")
View(FullData)
?left_join
View(DataWithRank)
FinalData<-merge(DataWithRank, crimehappy,  by="State") %>% arrange(Rank)
FinalData<-merge(DataWithRank, crimehappy,  by="State") %>% arrange(Rank.x)
View(FinalData)
FinalData<-full_join(DataWithRank, crimehappy, by="State") %>% arrange(Rank)
FinalData<-full_join(DataWithRank, crimehappy, by="State")
FinalData<-inner_join(DataWithRank, crimehappy, by="State")
FinalData<-left_join(DataWithRank, crimehappy, by="State") %>% arrange(Rank)
?merge
View(FinalData)
FinalData<-merge(DataWithRank, crimehappy, by="State") %>% arrange(Rank.x)
View(FinalData)
View(DataWithRank)
colnames(FinalData)[4]<-"Rank"
View(FinalData)
FinalData<-FinalData[, -ncol(FinalData)-1]
View(FinalData)
ncol(FinalData)-1
colnames(FinalData)[28]
FinalData<-FinalData[, -28]
View(FinalData)
View(crimehappy)
happy<-read.csv("Happinessdata.csv")
crimehappy<-merge(crime, happy, by="State")
colnames(crimehappy)[3]<-"State"
crimehappy<-crimehappy[,-1]
View(crimehappy)
FinalData<-merge(DataWithRank, crimehappy, by="State") %>% arrange(Rank)
View(FinalData)
View(FinalData)
FinalData<-FinalData[, -2]
View(educ_update)
View(FinalData)
write_csv("../data/finaldata.csv")
FinalData<-merge(DataWithRank, crimehappy, by="State") %>% arrange(Rank)
View(FinalData)
FinalData<-FinalData[, -2] %>% write_csv("../data/finaldata.csv")
educ <- read.csv("MERGED2014_15_PP.csv")
educ_update<- educ[, 4:7]
colnames(educ_update) <- c("Name", "City", "State", "Zip")
educ_update$Latitude <- educ$LATITUDE
educ_update$Longitude <- educ$LONGITUDE
educ_update$ADMrate <- educ$ADM_RATE
educ_update$Ownership <- educ$CONTROL
educ_update$Citytype<- educ$LOCALE
educ_update$SAT <- educ$SAT_AVG
educ_update$AvgCost <- as.numeric(educ$COSTT4_A) #average cost of attendence
educ_update$Major_agriculture <- educ$CIP01BACHL
educ_update$Major_NatureResource <- educ$CIP03BACHL
educ_update$Major_Architecture <- educ$CIP04BACHL
educ_update$Major_CS <- educ$CIP11BACHL
educ_update$Major_Edu <- educ$CIP13BACHL
educ_update$Major_Engineering <- educ$CIP14BACHL
educ_update$Major_Bio <- educ$CIP26BACHL
educ_update$Major_MathStat <- educ$CIP27BACHL
educ_update$Major_Psychology <- educ$CIP42BACHL
educ_update$Major_SocialScience <- educ$CIP45BACHL
educ_update$Major_Business <- educ$CIP52BACHL
educ_update$Major_History <- educ$CIP54BACHL
write.csv(educ_update, file = "CleanData.csv")
ranking_data <- read.csv("../output/name_ranking.csv")
ranking_data <- ranking_data[order(ranking_data$Name), ] %>%
filter(!is.na(Rank))
total<- merge(ranking_data, educ_update, by="Name")
total<- total[order(total$Rank),]
rownames(total)<- seq(1:nrow(total))
write.csv(total, file = "DataWithRank.csv")
FinalData<-merge(DataWithRank, crimehappy, by="State") %>% arrange(Rank)
FinalData<-FinalData[, -2] %>% write_csv("../data/finaldata.csv")
View(FinalData)
View(DataWithRank)
datarank<-read.csv("DataWithRank.csv")
View(datarank)
FinalData<-merge(DataWithRank, crimehappy, by="State") %>% arrange(Rank)
FinalData<-FinalData[, -2] %>% write_csv("../data/finaldata.csv")
View(FinalData)
View(FinalData)
View(datarank)
View(FinalData)
View(datarank)
FinalData<-merge(datarank, crimehappy, by="State") %>% arrange(Rank)
FinalData<-FinalData[, -2] %>% write_csv("../data/finaldata.csv")
View(FinalData)
